{
  "hash": "4f47f1189ee42d95036d922d6024dd1a",
  "result": {
    "markdown": "---\ntitle: 数据可视化\n---\n\n\n\n本节主要讲解最基本的可视化函数，进而讲解简便的表数据的可视化，以及空间数据的可视化。主要涉及到包 `ggplot2` 和 `tmap` 。\n\n一般情况下，对数据进行可视化所绘制出来的图，都是矢量图，即记录了图上每一个元素在什么位置、有什么形状的、显示什么颜色等。\n尽管这些图可以输出成位图格式的图片文件，但是在 R 语言中这些都是按照矢量图进行处理的。\n\n本节主要使用这个数据进行展示。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo.table <- read.csv(\"data/LNHP03.csv\")\ndemo.table[,c(\"X\", \"Y\")] <- lapply(demo.table[,c(\"X\", \"Y\")], as.numeric)\ndemo.table[,c(\"PURCHASE\", \"FLOORSZ\")] <- lapply(demo.table[,c(\"PURCHASE\", \"FLOORSZ\")], as.integer)\n```\n:::\n\n\n## 基本的可视化函数\n\n### 绘图元素\n\n绘制图形，尤其是矢量图，是一个非常复杂的过程，需要有很多的配置设置。\n但是有一些函数基本上包揽了这些工作，直接使用该函数，填写一些参数，就可以创建一个图表。\n这些函数主要有：\n\n- `plot()` 绘制散点图、折线图\n- `hist()` 绘制直方图\n- ...\n\n最具代表性的就是用于绘制散点图的 `plot()` 函数。例如将 `PURCHASE` 和 `FLOORSZ` 的值绘制成散点图，可使用如下代码\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(demo.table$FLOORSZ, demo.table$PURCHASE, main = \"PURCHASE ~ FLOORSZ\", xlab = \"FLOORSZ\", ylab = \"PURCHASE\")\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n甚至可以只对一个向量输出散点图\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(demo.table$PURCHASE, xlab = \"\", ylab = \"PURCHASE\")\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n该函数具有很多配置参数，\n\n| 参数名        | 类型      | 含义                                                         | 默认值 |\n| ------------- | --------- | ------------------------------------------------------------ | ------ |\n| `x` `y`       | vector    | 每个点的坐标                                                 |        |\n| `type`        | character | 输出图片的类型。`p`指散点图，`l`指折线图，`b`指同时输出点和线（不重叠），`o`指重叠输出点和线，`h`指以类似于直方图的形式输出。 | `\"p\"`  |\n| `xlim` `ylim` | vector    | $x$ 轴和 $y$ 轴的显示范围，分别是一个具有两个 numeric 类型元素的向量，前者作为下界，后者作为上界。 |        |\n| `log`         | character | 指定哪些轴需要做对数变换。如果取值 `\"x\"` 或 `\"y\"` 则只在这些轴上变换，如果取值 `\"xy\"` 或 `\"yx\"` 则在两个轴上都做变换。 |        |\n| `main` `sub`  | character | 图片主标题和副标题。一般传入一个字符串。                     |        |\n| `xlab` `ylab` |           | $x$ 轴和 $y$ 轴的标题。一般传入一个字符串。                  |        |\n| ...           | 变长参数  | 传给更底层绘图函数的参数。                                   |        |\n\n在该函数的基础上，可以增加一些辅助点、辅助线、文字等。分别使用 `points()` `abline()` `grid()` `text()` 等函数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 辅助线\nplot(demo.table$PURCHASE)\nabline(h = 600000)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 背景格网、辅助线，文字\nplot(demo.table$FLOORSZ, demo.table$PURCHASE, xlim = c(0, 300), main = \"PURCHASE ~ FLOORSZ\", xlab = \"FLOORSZ\", ylab = \"PURCHASE\")\ngrid(nx = 20, ny = 20)   # x轴和 y轴格点的数量\nabline(a = 0, b = 1000)  # 斜率和截距\ntext(290, 320*1000, expression(\"£1000\"/m^2))  # 文字的横纵坐标以及内容\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### 颜色和形状\n\n以上这些函数中，绘图元素的颜色，都是通过 `col` 参数设置的。例如我们将上一个图中的辅助线改为红色\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 背景格网、辅助线，文字\nplot(demo.table$FLOORSZ, demo.table$PURCHASE, xlim = c(0, 300), main = \"PURCHASE ~ FLOORSZ\", xlab = \"FLOORSZ\", ylab = \"PURCHASE\")\ngrid(nx = 20, ny = 20)   # x轴和 y轴格点的数量\nabline(a = 0, b = 1000, col = \"red\")  # 斜率和截距\ntext(290, 320*1000, expression(\"£1000\"/m^2), col = \"red\")  # 文字的横纵坐标以及内容\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n颜色可以通过 `colors()` 函数查看内置的颜色，或者使用 `rgb()` `hsv()` `hcl()` 函数生成颜色值。这里不做过多介绍。\n\n点的形状是通过 `pch` 参数进行控制的，R 中一共包含 25 种点的样式，传入对应样式的序号即可。大小通过 `cex` 参数配置，接收一个浮点数，类似于放大缩小的比例，取值大于1则变大，小于1则变小。\n\n线的形状是通过 `lty` 参数进行控制的，R 种一共包含 6 种线的样式，传入对应样式的序号即可。线的粗细通过 `lwd` 参数配置，接收一个浮点数，可以理解为线纵向所占的像素数。\n\n字体的控制比较复杂，这里只介绍一下 `family` 参数，相当于在 Word 种所设置的字体，下面示例种填入的 `\"serif\"` 指默认的衬线字体，一般情况下系统会选择 Times New Roman 。当然这里也可以指定一些其他字体，但并不是所有字体都是 R 所支持的。\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 背景格网、辅助线，文字\nplot(demo.table$FLOORSZ, demo.table$PURCHASE, xlim = c(0, 300), main = \"PURCHASE ~ FLOORSZ\", xlab = \"FLOORSZ\", ylab = \"PURCHASE\", pch = 3, cex = 0.8)\ngrid(nx = 20, ny = 20)   # x轴和 y轴格点的数量\nabline(a = 0, b = 1000, col = \"red\", lty = 2, lwd = 2, )  # 斜率和截距\ntext(300, 300*1000, expression(\"£1000\"/m^2), col = \"red\", family = \"serif\", cex = 1.5, adj = c(1, 0))  # 文字的横纵坐标以及内容\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n有关这些绘图函数的详细情况，请查看《R 语言空间数据处理于分析实践教程》。\n\n## 基础数据的可视化\n\n用于数据可视化的包有很多，但是这里主要介绍使用 `ggplot2` 包进行可视化的方法。\n\n函数包 `ggplot2` 是由 Hadley Wickham 等人开发和维护的数据可视化工具函数包，是当前 R 中最流行的可视化函数包之一。\n与大多数数据可视化函数包不同，函数包 ggplot2 基于 2005 年 Wilkinson 提出的图形语法开发，由一系列的独立可视化组件构成，这些组件可以被称为“图层”。\n因此，ggplot2 的功能非常强大，可以根据不同的可视化问题与需求，量身定制不同的可视化图形。\n\n尽管 ggplot2 功能强大，但常用的可视化图无非是散点图、折线图、柱状图、饼图、直方图、箱线图等类型，而且理论上这些图都可以使用 plot 以及其他一些 R 自带的函数进行实现。\n因此本节着重介绍这个包一些特有的功能，使用这些功能可以大大简化绘图流程。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n### 散点图\n\n本节采用 iris 数据集进行演示。该数据集中包含了三种类型的鸢尾花的一些形态指标。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n:::\n:::\n\n\n我们使用这种方式展示字段 `Sepal.Length` 和 `Sepal.Width` 之间的关系，并给不同的鸢尾花类型使用不同的符号。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + geom_point(aes(x = Sepal.Length, y = Sepal.Width, color = Species))  # 根据颜色区分鸢尾花\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(iris) + geom_point(aes(x = Sepal.Length, y = Sepal.Width, shape = Species))  # 根据点形区分鸢尾花\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n可见，`ggplot` 包首先要使用 `ggplot()` 函数创建一个绘图环境，然后在后面叠加所需要绘制的图层符号。\n\n上面所用到的 `aes()` 函数，是指定将数据映射到图层的参数， `x` `y` 表示点的坐标，此外 `shape` `size` `color` `group` 等绘图参数，分别将不同的数据映射到了不同的绘图元素上。\n这个函数可以放在 `gemo_points()` 中，也可以放在 `ggplot()` 中。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, group = Species, color = Species)) + geom_point()\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n对于散点图，我们还可以添加一个回归曲线，使用 `geom_smooth()` 函数。如果 `aes()` 函数中对数据进行了分组，那么，`geom_smooth()` 就会对每个组分别进行回归。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) + geom_point() + geom_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n我们也可以将其他两个参数加入，字段 `Petal.Length` 用大小表达，字段 `Petal.Width` 用颜色表达\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + geom_point(aes(x = Sepal.Length, y = Sepal.Width, shape = Species, size = Petal.Length, color = Petal.Width))\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n我们也可以更换一个比较学术化的主题，只需要在后面增加一个 `theme_bw()` 函数，即可进行主题设置\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + \n    geom_point(aes(x = Sepal.Length, y = Sepal.Width, shape = Species)) + \n    theme_bw()\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 折线图\n\n折线图一般用于表示一个变量随另一个变量的变化趋势，一般情况下这两个变量不会是一个类别变量，而且横轴的取值一般是连续型变量，或者是等差数列。\n\n这里使用 `airquality` 数据集，来展示对于时间序列的可视化。这个数据集中包含了纽约1973年5-9月每日空气质量。\n我们需要用不同的线绘制出不同月份每天气温变化图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(airquality)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(airquality) +\n    geom_line(aes(x = Day, y = Temp, color = as.factor(Month)))\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n这里使用到了一个 `as.factor()` 函数，根据这个名字，可以看到这个函数是将变量转换为 `factor` 类型的变量，这也是 R 中一个常用的数据类型——因子类型。\n因子类型比较类似于实验中的控制变量，这种变量可以是整数，可以是字符串，但必须是有限个的，而且一般情况下每个因子有不同的重复实验。\n这个案例中，月份就可以认为是因子。\n\n当然，折线图也不一定必须是时间序列的，例如下面这个数据集 `CO2` 描述了不同二氧化碳浓度下耐寒植物CO2摄取的差异。\n我们可以分别画出不同植物在低温处理和非低温处理下吸收二氧化碳能力随二氧化碳浓度的变化图\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCO2.edit <- CO2\nCO2.edit$Plant <- sapply(CO2$Plant, FUN = function(x) {\n    paste(substring(x, 1, 1), substring(x, 3, 3), sep = \"\")\n})\nggplot(CO2.edit) +\n    geom_line(aes(x = conc, y = uptake, linetype = Treatment)) +\n    facet_wrap(~ Plant)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n上述代码中，使用 `facet_wrap()` 函数进行分幅绘图，接收一个 `formula` 对象，公式右边列出分组依据。还接受两个参数 `nrow` 和 `ncol` ，和创建矩阵时的用法一样。\n\n### 柱状图\n\n柱状图一般用于大小的比较，横轴上一般是一个类别变量，纵轴一般是一个整型变量或连续型变量。\n如果已经统计好值，则使用 `geom_col()` 函数，如果需要 `ggplot` 进行统计，则使用 `geom_bar()` 函数。\n\n例如，我们统计三种鸢尾花品种花萼和花瓣的形态数据的平均值，使用柱状图进行展示。\n\n我们首先对该数据进行一个分组统计，统计出各组内指标的平均值。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n载入程辑包：'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\niris.summary <- data.frame(summarise(group_by(iris, Species), Sepal.Length.mean = mean(Sepal.Length), Sepal.Width.mean = mean(Sepal.Width)), row.names = \"Species\")\niris.summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Sepal.Length.mean Sepal.Width.mean\nsetosa                 5.006            3.428\nversicolor             5.936            2.770\nvirginica              6.588            2.974\n```\n:::\n:::\n\n\n其次注意到，这种形式的数据集，并不便于使用 `ggplot` 函数包进行可视化，因为数据映射中的 `y` 对应在了两列中。我们需要对其进行转换。\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris.summary.reshape <- Reduce(rbind, lapply(rownames(iris.summary), FUN = function (x) {\n    data.frame(\n        Species = x,\n        Measurements = colnames(iris.summary),\n        Data = as.numeric(iris.summary[x,])\n    )\n}))\niris.summary.reshape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Species      Measurements  Data\n1     setosa Sepal.Length.mean 5.006\n2     setosa  Sepal.Width.mean 3.428\n3 versicolor Sepal.Length.mean 5.936\n4 versicolor  Sepal.Width.mean 2.770\n5  virginica Sepal.Length.mean 6.588\n6  virginica  Sepal.Width.mean 2.974\n```\n:::\n:::\n\n\n> 这里使用到 `Reduce(f, x)` 函数，可以实现对 $x$ 的第一、二两个元素运行函数 $f$，得到的结果与第三个元素再运行函数 $f$，以此类推，最后将 $x$ 的所有元素整合到一起。\n> 具体使用方法这里不做展开\n\n然后可以对 `iris.reshape` 进行可视化，使用两个柱子分别显示两组变量\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris.summary.reshape) +\n    geom_col(aes(x = Species, y = Data, fill = Measurements), position = position_dodge2(padding = 0,  preserve = \"single\"))\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### 箱线图\n\n箱线图是将一组数据按照大小顺序排列后进行绘制的，包含6个数据节点，分别表示出数据的上边缘、上四分位数点Q3（数据从小到大排列后处在75％位置上的数据）、中位数、下四分位数Q1（数据从小到大排列后处在25％位置上的数据）、下边缘和异常值。由此，箱线图很形象地分为中心、延伸以及分布状态的全部范围。\n\n例如我们分析鸢尾花数据集中各个指标的分布，仍然需要先将数据集进行格式转换。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasurements.colnames <- colnames(iris)[-c(which(colnames(iris) == \"Species\"))]\niris.reshape <- Reduce(rbind, (lapply(unique(iris$Species), FUN = function (x) {\n    item <- filter(iris, Species == x)\n    Reduce(rbind, lapply(1:nrow(item), FUN = function (r) {\n        data.frame(\n            Species = x,\n            Measurements = measurements.colnames,\n            Data = as.numeric(item[r, measurements.colnames])\n        )\n    }))\n})))\nhead(iris.reshape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Species Measurements Data\n1  setosa Sepal.Length  5.1\n2  setosa  Sepal.Width  3.5\n3  setosa Petal.Length  1.4\n4  setosa  Petal.Width  0.2\n5  setosa Sepal.Length  4.9\n6  setosa  Sepal.Width  3.0\n```\n:::\n:::\n\n\n然后使用 `gemo_boxplot()` 函数绘制箱线图，$x$ 轴设置为品种，$y$ 轴设置为数值，然后根据指标进行分幅。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris.reshape) + geom_boxplot(aes(x = Species, y = Data, fill = Species)) + facet_wrap(~ Measurements)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n这样可以明显看出数据分布的方式。\n\n上面这个数据处理的方式是比较通用的，可以写成如下函数，方便以后使用。这个函数主要具有如下4个参数：\n\n- `df` 要处理的表数据\n- `first.names` 数据处理的第一索引，将出现在结果的第一列中。\n    - 如果是字符串，则取该字符串对应的列\n    - 如果是字符串向量，则将该字符串向量作为第一索引\n    - 如果是逻辑值，则将行名作为第一索引\n    - 如果是数值，则将数值对应的列作为第一索引\n- `col.names` 要提取数据的列。如果为 `NULL` 则取除了 `first.names` 之外的所有列。这些列名的取值将出现在第二列。\n- `output.names` 输出数据的列名。\n    - 如果不填，则程序自动处理列名。\n    - 如果填一个，则第二列用该值，第一列用根据 `first.names` 提取的列名，第三列默认名称 `Value`\n    - 如果填两个，则前两列使用该值，第三列默认名称 `Value`\n    - 如果填三个，则三列全都使用该值\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf.reshape.ggplot <- function (df, first.names, col.names=NULL, output.names=c()) {\n    if (class(df) != \"data.frame\") {\n        stop(\"df must be a data.frame\")\n    }\n    first.index <- c()\n    second.index <- c()\n    use.first.name <- \"primary.names\"\n    if (class(first.names) == \"character\" && length(first.names) == 1 && first.names %in% colnames(df)) {\n        first.index <- df[[first.names]]\n        second.index <- colnames(df)[-c(which(colnames(df) == first.names))]\n        use.first.name <- first.names\n    } else if (length(first.names) == nrow(df)) {\n        first.index <- first.names\n        second.index <- colnames(df)\n    } else if (class(first.names) == \"logical\" && length(first.names) == 1 && first.names == TRUE) {\n        first.index <- rownames(df)\n        second.index <- colnames(df)\n    } else if (class(first.names) %in% c(\"numeric\", \"integer\") && length(first.names) == 1 && first.names == TRUE) {\n        first.names <- as.integer(first.names)\n        first.index <- df[, first.names]\n        second.index <- colnames(df)[-c(first.names)]\n        use.first.name <- colnames(df)[first.names]\n    } else {\n        stop(\"first.names accept a vector or a column name/index\")\n    }\n    df.reshape <- Reduce(rbind, (lapply(unique(first.index), FUN = function (x) {\n        item <- df[first.index == x,]\n        Reduce(rbind, lapply(1:nrow(item), FUN = function (r) {\n            data.frame(\n                \"primary.names\" = x,\n                \"secondary.names\" = as.character(second.index),\n                \"value\" = as.vector(as.matrix(item[r, second.index]))\n            )\n        }))\n    })))\n    if (length(output.names) == 0) {\n        colnames(df.reshape)[1] <- use.first.name\n    } else if (class(output.names) == \"character\") {\n        if (length(output.names) == 3) {\n            colnames(df.reshape) <- output.names\n        } else if (length(output.names) == 2) {\n            colnames(df.reshape)[1:2] <- output.names\n        } else if (length(output.names) == 1) {\n            colnames(df.reshape)[1:2] <- c(use.first.name, output.names)\n        } else {\n            warning(\"length of output.names is not between 1 and 3\")\n        }\n    }\n    df.reshape\n}\n```\n:::\n\n\n### 直方图\n\n饼图主要展示各个值在不同区间内分布的频数，用于研究数据的概率分布。\n\n例如对鸢尾花数据集，我们可以分别查看三种花的 `Sepal.Length` 指标的分布情况。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + geom_histogram(aes(x = Sepal.Length), binwidth = 0.2) + facet_wrap(~ Species, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n如果 `aes()` 中指定的是 `y` 则直方图变为横向，\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(iris) + geom_histogram(aes(y = Sepal.Length), binwidth = 0.2) + facet_wrap(~ Species)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## 空间数据可视化\n\n空间数据可视化又称专题制图，即制作一个专题地图。专题地图就需要至少有四个要素：符号、图例、指北针、比例尺。这些可以通过程序自动添加。\n\n对于空间数据，其可视化有一个难点，即在二维地图上的 $x,y$ 坐标已经被要素的空间位置所占据，只能通过颜色、大小、粗细来表示数值型变量的大小，通过形状等表示类别型变量的大小。\n如果是三维地图，可以使用 $z$ 轴来展示数值型变量的大小，也可以做出一些效果不错的专题图。但是三维可视化仍然存在很多问题，这里还是主要介绍二维可视化。\n\n我们以这个数据为例进行演示。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo.shp <- rgdal::readOGR(\"data/LNHP03.shp\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPlease note that rgdal will be retired during October 2023,\nplan transition to sf/stars/terra functions using GDAL and PROJ\nat your earliest convenience.\nSee https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution\nrgdal: version: 1.6-7, (SVN revision 1203)\nGeospatial Data Abstraction Library extensions to R successfully loaded\nLoaded GDAL runtime: GDAL 3.5.3, released 2022/10/21\nPath to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/rgdal/gdal\n GDAL does not use iconv for recoding strings.\nGDAL binary built with GEOS: TRUE \nLoaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910]\nPath to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library/rgdal/proj\nPROJ CDN enabled: TRUE\nLinking to sp version:1.6-1\nTo mute warnings of possible GDAL/OSR exportToProj4() degradation,\nuse options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nOGR data source with driver: ESRI Shapefile \nSource: \"/Users/yigong/Documents/RTraining/data/LNHP03.shp\", layer: \"LNHP03\"\nwith 2108 features\nIt has 17 fields\n```\n:::\n:::\n\n\n当加载了 `sp` 包之后，`plot()` 函数就可以直接绘制空间数据，用法如下\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sp)\nplot(demo.shp)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n也可以显示空间面数据\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(LondonBorough, package = \"GWmodel\")\nplot(londonborough)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n二者也可以进行叠加显示\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(londonborough)\npoints(demo.shp)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n事实上， `ggplot` 包也可以做空间数据可视化，但是这里主要推荐使用 `tmap` 包，来提供更强大的可视化功能。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tmap)\n```\n:::\n\n\n### 绘制符号\n\n`tmap` 包的使用思路是，使用 `tm_shape()` 添加一组要素，然后根据要素的类型，选择 `tm_symbol()` `tm_polygon()` 等函数进行可视化，\n\n将数据 `demo.shp` 使用点符号对变量 `PURCHASE` 进行可视化，给 `col` 参数传入一个列名，让函数根据该列的值进行可视化，用 `size` 参数传入点的大小。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + tm_symbols(col = \"PURCHASE\", size = 0.2)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n如果我们不想要这么多分级，那么可以使用参数 `n` 对其进行设置\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + tm_symbols(col = \"PURCHASE\", size = 0.2, n = 3)\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n我们也可以使用参数 `palette` 换一个配色方案\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + tm_symbols(col = \"PURCHASE\", size = 0.2, palette = \"Blues\")\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n也可以同时可视化多组变量，并进行分幅输出\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + tm_symbols(col = c(\"PURCHASE\", \"FLOORSZ\", \"UNEMPLOY\", \"PROF\"), size = 0.2) + tm_facets()\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n对于面要素，使用方法也是类似的，例如我们使用 `World` 数据集，来绘制全球人口分布图\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(World)\ntm_shape(World) + tm_polygons(\"life_exp\")\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n我们也可以在一幅图上输出多个要素，这里使用 `rivers` 数据集，该数据集包括了全球的主要河流；以及 `metro` 数据，包含了多年全球各国人口。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(rivers)\ntm_shape(World) + tm_polygons(col = \"white\") + tm_shape(rivers) + tm_lines(col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(metro)\ntm_shape(World) + tm_polygons(col = \"white\") + tm_shape(metro) + tm_symbols(size = \"pop2020\", col = \"pop2020\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nold-style crs object detected; please recreate object with a recent sf::st_crs()\nold-style crs object detected; please recreate object with a recent sf::st_crs()\nold-style crs object detected; please recreate object with a recent sf::st_crs()\n```\n:::\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n### 指北针和比例尺\n\n指北针和比例尺的添加也是非常方便的，使用 `tm_compass()` 函数和 `tm_scale_bar()` 函数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + tm_symbols(col = \"PURCHASE\", size = 0.2) + tm_compass() + tm_scale_bar()\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n图例是自动添加的，而指北针和比例尺的默认的位置是不太合适的。\n\n如果仅仅是调整位置，这两个函数都接收 `position` 参数，该参数接收一个二元向量，可以是字符串或 $[0,1]$ 区间内的数值。\n如果是字符串，第一个值取 `left``center``right` 中的一个；第二个值取 `top``center``bottom` 中的一个。\n可以是全小写，也可以是全大写。如果是全大写，则忽略边距。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + tm_symbols(col = \"PURCHASE\", size = 0.2) + tm_compass(position = c(\"right\", \"top\")) + tm_scale_bar(position = c(\"left\", \"top\"))\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n### 图名和图例\n\n图名和图例的添加和配置，和指北针、比例尺有些不同。图例是自动添加的，图名是需要指定的，他们都是在 `tm_layout()` 函数中进行设置的。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](03-数据可视化_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n第一个参数就是 `title` ，即图标题，其位置使用 `main.position` 参数进行设置。对于图例的位置，使用 `legend.posistion` 参数设置。\n\n该函数还有非常多的参数，这里难以一一介绍。可以使用下面这个方式，查看所有函数的帮助文档。对于 `tm_layout()` 函数，其参数默认值都还是比较合适的，一般就调整一下位置。\n\n## 制图结果的输出\n\n制图结果我们需要输出到文件中，以在论文或其他文档中使用。\n在 R 中输出图片的方式，是先创建一个绘图设备，然后使用语句进行绘图，最后关闭该设备，即可得到文件。\n在 R 控制台中，默认的绘图设备是控制台的一个新窗口，在 Jupyter 中是一个 cell 的输出空间，在 RStudio 中是专门用于显示图片的子窗。\n\n创建绘图设备有几种类型，输出栅格图的 `png` `jpg` 等，输出矢量图的 `eps` `pdf` 等。在 Windows 上，还有 `emf` 这种设备，可以直接嵌入到 Office 中。\n\n关闭绘图设备的函数是 `dev.off()`。\n\n### 位图输出\n\n这里以 `png` 为例展示输出位图图片的方式。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE.png\", width = 1024, height = 1024, units = \"px\", res = 300, pointsize = 12)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n该函数中有以下几个参数：\n\n- `width` `height` 是设置图片宽高的，参数 `units` 是指宽高设置数值的单位。\n- `units` 可以取 `px` 表示像素，也可以取 `cm` `in` 表示长度。而不同单位的设置方法，也会影响 `res` 的效果。\n- `res` 是指 PPI（Pixel Per Inch） ，即图像的采样率（在图像中，每英寸所包含的像素数目）\n- `pointsize` 是绘图点大小，单位是 $1/72$。\n\n关于这些参数的设置，我们可以对比以下几张图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-2400px-300dpi-12.png\", width = 2400, height = 2400, units = \"px\", res = 300)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-1200px-300dpi-12.png\", width = 1200, height = 1200, units = \"px\", res = 300)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-1200px-72dpi-12.png\", width = 1200, height = 1200, units = \"px\", res = 72)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-1200px-72dpi-6.png\", width = 1200, height = 1200, units = \"px\", res = 72, point = 6)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-1200px-72dpi-18.png\", width = 1200, height = 1200, units = \"px\", res = 72, point = 18)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-8in-300dpi-12.png\", width = 8, height = 8, units = \"in\", res = 300)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-4in-300dpi-12.png\", width = 4, height = 4, units = \"in\", res = 300)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-4in-72dpi-12.png\", width = 4, height = 4, units = \"in\", res = 72)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-4in-72dpi-6.png\", width = 4, height = 4, units = \"in\", res = 72, point = 6)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n\n```{.r .cell-code}\npng(filename = \"output-03/PURCHASE-4in-72dpi-18.png\", width = 4, height = 4, units = \"in\", res = 72, point = 18)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSome legend labels were too wide. These labels have been resized to 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n:::\n\n```{.r .cell-code}\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n可以看到，图片尺寸 $l$、PPI $p$、点大小 $s$ 都对生成的图片有影响。我们分别对 `units` 是物理长度和像素两种情况进行分析。\n\n由于 R 中所绘制的图都是矢量图，就像在一张 A4 纸上绘制函数图像一样。\n例如，当我们需要在图上绘制 $(2,2)$ 这个点时，如何确定这个点应该画在哪里？\n我们首先假定以 A4 纸的左下角为原点，沿纸边缘为坐标轴，1 cm 为单位长度。那么  $(2,2)$ 就绘制在了距离原点 (2 cm, 2 cm) 的位置。\n那如果我们规定 2 cm 为单位长度，这个点就会被绘制到 (4 cm, 4 cm) 的位置。\n但是，实际上，为了让绘图内容以最大化的方式占满绘图空间，单位长度是根据绘制内容进行确定的，而且两个方向上的单位长度不一定一样。\n\n那如果我们有一个长 10 宽 10 的正方形，想要最大化绘制在 A4 纸上，并且要在外面留下一定长度的边距，那么就需要计算一下这个正方形的各个格点的坐标。\n此时如果其他要求不变，要把这个正方形绘制到一张 A2 纸（A4纸的四倍）上，此时最然正方形的长宽还是 10 单位长度，但是一个单位长度的实际物理长度就变大了。\n那么如果这个正方形内部有 64 个等间距的格点，相比在 A4 纸上绘制，这 64 个格点之间的间距就要大很多。\n这就是输出图片尺寸 $l$ 的影响。\n\n但是实际上，无论是打印机、绘图仪还是纸笔，在绘图的时候，都是以一个很小的正方形代替一个数学意义上的点，这个点可以大可以小，类似于圆珠笔和记号笔的笔画差异。\n当我们用圆珠笔画点的时候，画出来的点在物理尺寸上比较小，但是用记号笔时，画出来的点物理尺寸就比较大。\n虽然这些点中心的位置是相同的，但是点的尺寸是不相同的。\n使用粗的笔时，如果要让看起来形状和细的笔形状差不多，那这个符号就要画的大一些。\n这就是输出点大小 $s$ 的影响。\n\n那么现在如果我们把这张纸扫描成图片，那么这个扫描仪每个像素的尺寸就决定了图片的清晰度。\n如果这个扫描仪每英寸有 72 个像素（72 PPI），其输出图片的尺寸就会比每英寸有 300 个像素的扫描仪小很多。\n如果我们都是用 300 PPI 的扫描仪，扫描 A2 纸得到的图像大小就会是扫描 A4 纸得到的图像大小的 4 倍。\n这就是 PPI $p$ 的影响。\n\n所以，如果我们把 `units` 设置为物理长度，生成的位图的像素数就是宽高 $(w,h)$ 与 PPI 的乘积，字体、符号的大小通过点大小 $s$ 控制。\n\n当 `units` 是像素时，程序需要保证输出的图片像素数是固定的，此时程序需要根据输出像素数和 PPI 来确定绘图区域的物理尺寸，进一步确定绘图单位长度。\n例如，如果指定图片宽和高的像素数是 1200 px ，输出 PPI 是 300 ，那么绘图区域的物理尺寸就是 4 in。\n如果指定图片宽和高的像素数改为是 2400 px，那么物理尺寸就是 8 in。\n如果指定图片宽和高的像素数是 1200 px，把输出 PPI 改为 72，则绘图区域物理尺寸就是 $16\\frac{2}{3}$ in。\n剩下的就之前的过程没有区别了。\n\n> 需要指出的是，当图片放在电脑中时，是没有 DPI 的概念的。DPI 是指每英寸点数，当图片还是电脑中的文件时，只存在像素数，不存在物理尺寸。\n只有当图片打印到纸上，或者显示到显示器上，此时图片被绘制出来，具有了物理尺寸，才涉及到 DPI 。\n总的来说，同样一张图片，第一次打印出来占满一张 A4 纸，第二次打印出来占四分之一张 A4 纸，那么可以说第二次的 DPI 是第一次的两倍。\n很多期刊投稿时对 DPI 有要求，而且不同类型的图片要求不同，在输出图片的时候， `res` 参数的值需要灵活设置。\n即使设置了 `res` 参数为 300 ，但如果图片尺寸过小，排版时被放大，就依然有可能达不到印刷要求。\n最保险的办法是直接根据纸张最大的尺寸绘制图片，选择最大的 PPI ，当然这就会大大增加图片的大小。\n如果图片太多，导致超出了投稿文件容量上限，此时就需要根据图片实际排版，确定合适的尺寸。\n因此，建议 `units` 参数传入物理长度，而不建议使用像素数。\n\n对于 tmap 包绘制的图，该包提供了一个函数 `tmap_save()` 来保存图片。\n该函数第一个参数接收 tmap 相关绘图函数的返回值，参数 `filename` 为输出文件名，`width``height``units` 与 `png` 函数相同，`dpi` 与 `res` 对应，此外还有一些其他设置参数。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- tm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ntmap_save(m, filename = \"output-03/PURCHASE_tmap.png\", width = 8, height = 8, units = \"in\", dpi = 300)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMap saved to /Users/yigong/Documents/RTraining/output-03/PURCHASE_tmap.png\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nResolution: 2400 by 2400 pixels\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSize: 8 by 8 inches (300 dpi)\n```\n:::\n:::\n\n\n### 矢量图输出\n\n对于矢量图来说，其格式非常的多，而且不同系统的支持也不一样。\n在 Office 系列软件中，使用的 emf 格式的矢量图。在 LaTeX 等软件中，支持 eps 格式的矢量图。\n虽然 PDF 格式是基本通用的，在任何系统上都能打开，但是也不能嵌入到 Word 中。\n而 SVG 格式可以嵌入到 Word 中，基本也可以在各个系统上打开。但是其对于中文的处理还有一定的问题。\n\n这里以生成 PDF 格式和 SVG 格式的图片为例，演示如何输出矢量图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdf(file = \"output-03/PURCHASE.pdf\", width = 8, height = 8, pointsize = 12)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsvg(file = \"output-03/PURCHASE.svg\", width = 8, height = 8, pointsize = 12)\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n\n\n可以发现，对于矢量图，只需要设置宽高和点大小即可，使用起来还是比较方便的。当然还有很多其他参数，例如字体的设置等，这里就不一一介绍了，只演示一下如何输出衬线字体的图片。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsvg(file = \"output-03/PURCHASE_serif.svg\", width = 8, height = 8, pointsize = 12, family = \"serif\")\ntm_shape(demo.shp) + \n    tm_symbols(col = \"PURCHASE\", size = 0.2) + \n    tm_compass(position = c(\"right\", \"top\")) + \n    tm_scale_bar(position = c(\"right\", \"bottom\")) +\n    tm_layout(\"Map of Housing Price\", main.title.position = c(\"left\", \"top\"), legend.position = c(\"left\", \"bottom\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nquartz_off_screen \n                2 \n```\n:::\n:::\n",
    "supporting": [
      "03-数据可视化_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}